===============================
 How to Use 2-matrix_divided.py
===============================

The ''matrix_divided()'' function returns a new matrix with all the
elements devided by the number div

Numbers
=======

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

    >>> matrix_divided([[-5, 3, 6], [2, -8, -10]], 4)
    [[-1.25, 0.75, 1.5], [0.5, -2.0, -2.5]]

    >>> matrix_divided([[1.5, 8.8, 9], [8, -4.7, 3.3]], 6)
    [[0.25, 1.47, 1.5], [1.33, -0.78, 0.55]]

Errors
======

::

    >>> matrix_divided(((6, 7), (4, 9)), 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[3, 6.6], {1, 2}], 4)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[4, 5, 1], [4.4, 3, 6]], 0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    >>> matrix_divided([[1, 2, 5], [-4, -5, -8]], 'num')
    Traceback (most recent call last):
    TypeError: div must be a number

    >>> matrix_divided([[2, 3.3, 7], [4, 8.9]], 3)
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

    >>> matrix_divided([[3, 'a'], [12, 3]], 9)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[5, 2], [9, 4]], float('inf'))
    [[0.0, 0.0], [0.0, 0.0]]

    >>> matrix_divided(None, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(None, None)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats
